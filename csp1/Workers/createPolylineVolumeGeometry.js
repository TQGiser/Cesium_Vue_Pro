define(["./defaultValue-94c3e563","./Matrix2-fc7e9822","./arrayRemoveDuplicates-06991c15","./BoundingRectangle-cbfe06ff","./Transforms-a076dbe6","./ComponentDatatype-4a60b8d6","./PolylineVolumeGeometryLibrary-759a8d46","./RuntimeError-c581ca93","./GeometryAttribute-2ecf73f6","./GeometryAttributes-7df9bef6","./GeometryPipeline-b4816e69","./IndexDatatype-db156785","./PolygonPipeline-cc031b9f","./VertexFormat-e46f29d6","./_commonjsHelpers-3aae1032-f55dc0c4","./combine-761d9c3f","./WebGLConstants-7dccdc96","./EllipsoidTangentPlane-d2c0c530","./AxisAlignedBoundingBox-8103739f","./IntersectionTests-5deed78b","./Plane-e20fba8c","./PolylinePipeline-7608e667","./EllipsoidGeodesic-dc94f381","./EllipsoidRhumbLine-daebc75b","./AttributeCompression-4d18cc04","./EncodedCartesian3-d3e254ea"],(function(e,t,n,o,i,r,a,l,s,p,c,d,u,m,y,g,f,h,b,E,P,_,v,k,V,L){"use strict";function w(e,t,n,o){const l=new p.GeometryAttributes;o.position&&(l.position=new s.GeometryAttribute({componentDatatype:r.ComponentDatatype.DOUBLE,componentsPerAttribute:3,values:e}));const m=t.length,y=e.length/3,g=(y-2*m)/(2*m),f=u.PolygonPipeline.triangulate(t),h=(g-1)*m*6+2*f.length,b=d.IndexDatatype.createTypedArray(y,h);let E,P,_,v,k,V;const L=2*m;let w=0;for(E=0;E<g-1;E++){for(P=0;P<m-1;P++)_=2*P+E*m*2,V=_+L,v=_+1,k=v+L,b[w++]=v,b[w++]=_,b[w++]=k,b[w++]=k,b[w++]=_,b[w++]=V;_=2*m-2+E*m*2,v=_+1,k=v+L,V=_+L,b[w++]=v,b[w++]=_,b[w++]=k,b[w++]=k,b[w++]=_,b[w++]=V}if(o.st||o.tangent||o.bitangent){const e=new Float32Array(2*y),o=1/(g-1),i=1/n.height,a=n.height/2;let p,c,d=0;for(E=0;E<g;E++){for(p=E*o,c=i*(t[0].y+a),e[d++]=p,e[d++]=c,P=1;P<m;P++)c=i*(t[P].y+a),e[d++]=p,e[d++]=c,e[d++]=p,e[d++]=c;c=i*(t[0].y+a),e[d++]=p,e[d++]=c}for(P=0;P<m;P++)p=0,c=i*(t[P].y+a),e[d++]=p,e[d++]=c;for(P=0;P<m;P++)p=(g-1)*o,c=i*(t[P].y+a),e[d++]=p,e[d++]=c;l.st=new s.GeometryAttribute({componentDatatype:r.ComponentDatatype.FLOAT,componentsPerAttribute:2,values:new Float32Array(e)})}const x=y-2*m;for(E=0;E<f.length;E+=3){const e=f[E]+x,t=f[E+1]+x,n=f[E+2]+x;b[w++]=e,b[w++]=t,b[w++]=n,b[w++]=n+m,b[w++]=t+m,b[w++]=e+m}let C=new s.Geometry({attributes:l,indices:b,boundingSphere:i.BoundingSphere.fromVertices(e),primitiveType:s.PrimitiveType.TRIANGLES});if(o.normal&&(C=c.GeometryPipeline.computeNormal(C)),o.tangent||o.bitangent){try{C=c.GeometryPipeline.computeTangentAndBitangent(C)}catch(D){a.oneTimeWarning("polyline-volume-tangent-bitangent","Unable to compute tangents and bitangents for polyline volume geometry")}o.tangent||(C.attributes.tangent=void 0),o.bitangent||(C.attributes.bitangent=void 0),o.st||(C.attributes.st=void 0)}return C}function x(n){n=e.defaultValue(n,e.defaultValue.EMPTY_OBJECT);const o=n.polylinePositions,i=n.shapePositions;if(!e.defined(o))throw new l.DeveloperError("options.polylinePositions is required.");if(!e.defined(i))throw new l.DeveloperError("options.shapePositions is required.");this._positions=o,this._shape=i,this._ellipsoid=t.Ellipsoid.clone(e.defaultValue(n.ellipsoid,t.Ellipsoid.WGS84)),this._cornerType=e.defaultValue(n.cornerType,a.CornerType.ROUNDED),this._vertexFormat=m.VertexFormat.clone(e.defaultValue(n.vertexFormat,m.VertexFormat.DEFAULT)),this._granularity=e.defaultValue(n.granularity,r.CesiumMath.RADIANS_PER_DEGREE),this._workerName="createPolylineVolumeGeometry";let s=1+o.length*t.Cartesian3.packedLength;s+=1+i.length*t.Cartesian2.packedLength,this.packedLength=s+t.Ellipsoid.packedLength+m.VertexFormat.packedLength+2}x.pack=function(n,o,i){if(!e.defined(n))throw new l.DeveloperError("value is required");if(!e.defined(o))throw new l.DeveloperError("array is required");let r;i=e.defaultValue(i,0);const a=n._positions;let s=a.length;for(o[i++]=s,r=0;r<s;++r,i+=t.Cartesian3.packedLength)t.Cartesian3.pack(a[r],o,i);const p=n._shape;for(s=p.length,o[i++]=s,r=0;r<s;++r,i+=t.Cartesian2.packedLength)t.Cartesian2.pack(p[r],o,i);return t.Ellipsoid.pack(n._ellipsoid,o,i),i+=t.Ellipsoid.packedLength,m.VertexFormat.pack(n._vertexFormat,o,i),i+=m.VertexFormat.packedLength,o[i++]=n._cornerType,o[i]=n._granularity,o};const C=t.Ellipsoid.clone(t.Ellipsoid.UNIT_SPHERE),D=new m.VertexFormat,F={polylinePositions:void 0,shapePositions:void 0,ellipsoid:C,vertexFormat:D,cornerType:void 0,granularity:void 0};x.unpack=function(n,o,i){if(!e.defined(n))throw new l.DeveloperError("array is required");let r;o=e.defaultValue(o,0);let a=n[o++];const s=new Array(a);for(r=0;r<a;++r,o+=t.Cartesian3.packedLength)s[r]=t.Cartesian3.unpack(n,o);a=n[o++];const p=new Array(a);for(r=0;r<a;++r,o+=t.Cartesian2.packedLength)p[r]=t.Cartesian2.unpack(n,o);const c=t.Ellipsoid.unpack(n,o,C);o+=t.Ellipsoid.packedLength;const d=m.VertexFormat.unpack(n,o,D);o+=m.VertexFormat.packedLength;const u=n[o++],y=n[o];return e.defined(i)?(i._positions=s,i._shape=p,i._ellipsoid=t.Ellipsoid.clone(c,i._ellipsoid),i._vertexFormat=m.VertexFormat.clone(d,i._vertexFormat),i._cornerType=u,i._granularity=y,i):(F.polylinePositions=s,F.shapePositions=p,F.cornerType=u,F.granularity=y,new x(F))};const A=new o.BoundingRectangle;function T(n,o){return e.defined(o)&&(n=x.unpack(n,o)),n._ellipsoid=t.Ellipsoid.clone(n._ellipsoid),x.createGeometry(n)}return x.createGeometry=function(e){const i=e._positions,r=n.arrayRemoveDuplicates(i,t.Cartesian3.equalsEpsilon);let l=e._shape;if(l=a.PolylineVolumeGeometryLibrary.removeDuplicatesFromShape(l),r.length<2||l.length<3)return;u.PolygonPipeline.computeWindingOrder2D(l)===u.WindingOrder.CLOCKWISE&&l.reverse();const s=o.BoundingRectangle.fromPoints(l,A),p=a.PolylineVolumeGeometryLibrary.computePositions(r,l,s,e,!0);return w(p,l,s,e._vertexFormat)},T}));