define(["./AttributeCompression-4d18cc04","./Matrix2-fc7e9822","./ComponentDatatype-4a60b8d6","./createTaskProcessorWorker","./RuntimeError-c581ca93","./defaultValue-94c3e563","./WebGLConstants-7dccdc96"],(function(e,t,a,r,n,o,i){"use strict";const s=32767,c=new t.Cartographic,u=new t.Cartesian3,p=new t.Rectangle,l=new t.Ellipsoid,d={min:void 0,max:void 0};function f(e){e=new Float64Array(e);let a=0;d.min=e[a++],d.max=e[a++],t.Rectangle.unpack(e,a,p),a+=t.Rectangle.packedLength,t.Ellipsoid.unpack(e,a,l)}function m(r,n){const o=new Uint16Array(r.positions);f(r.packedBuffer);const i=p,m=l,h=d.min,C=d.max,g=o.length/3,b=o.subarray(0,g),w=o.subarray(g,2*g),k=o.subarray(2*g,3*g);e.AttributeCompression.zigZagDeltaDecode(b,w,k);const y=new Float64Array(o.length);for(let e=0;e<g;++e){const r=b[e],n=w[e],o=k[e],p=a.CesiumMath.lerp(i.west,i.east,r/s),l=a.CesiumMath.lerp(i.south,i.north,n/s),d=a.CesiumMath.lerp(h,C,o/s),f=t.Cartographic.fromRadians(p,l,d,c),g=m.cartographicToCartesian(f,u);t.Cartesian3.pack(g,y,3*e)}return n.push(y.buffer),{positions:y.buffer}}var h=r(m);return h}));